<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ReactContext</title>
    <link href="/2021/06/30/ReactContext/"/>
    <url>/2021/06/30/ReactContext/</url>
    
    <content type="html"><![CDATA[<h2 id="aa"><a href="#aa" class="headerlink" title="aa"></a>aa</h2>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零搞清楚什么是构造函数</title>
    <link href="/2021/06/26/Constructor/"/>
    <url>/2021/06/26/Constructor/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是构造函数"><a href="#什么是构造函数" class="headerlink" title="什么是构造函数"></a>什么是构造函数</h1><p>概念：通过 new 关键字来调用的函数，称为构造函数</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>构造函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MVC 和 MVVM 是个啥</title>
    <link href="/2021/01/22/MVCandMVVM/"/>
    <url>/2021/01/22/MVCandMVVM/</url>
    
    <content type="html"><![CDATA[<p>MVC 和 MVVM 是一种程序开发设计模式</p><h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><h2 id="什么是-MVC"><a href="#什么是-MVC" class="headerlink" title="什么是 MVC"></a>什么是 MVC</h2><p>MVC 是 Model View Controller 的缩写</p><ul><li><p>Model：模型层，可以在数据库中存取数据，用于处理数据逻辑</p></li><li><p>View：视图层，渲染用户界面逻辑</p></li><li><p>Controller：控制器，接收来自视图界面的请求，并交给模型进行处理，起到了一个连接的作用</p></li></ul><h2 id="它们仨什么关系"><a href="#它们仨什么关系" class="headerlink" title="它们仨什么关系"></a>它们仨什么关系</h2><p>看图说话</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy90dFZXdXJMb0dWaWFkeUV6WllDRWlhbXIxSWhKaWNlMUpGUXlCaEQ1Q2RQSHA0RllnRXVVVGVaRDk0RzdKYUNHS3BYNGhpYTdibm1rcU9Fbk5FcEppYUhCaWJSUS82NDA?x-oss-process=image/format,png#pic_center" alt="三者关系图"></p><p>大致过程：</p><p>用户在视图交互，然后请求发送到控制器，控制器根据请求类型和请求的指令发送到相应的模型，模型可以与数据库进行交互，一通操作之后（指增删改查），根据业务的逻辑选择相应的视图进行显示，用户获得此次交互的反馈信息</p><h2 id="MVC-的特点"><a href="#MVC-的特点" class="headerlink" title="MVC 的特点"></a>MVC 的特点</h2><p>模型和视图之间实现代码分离，松散耦合，使之成为一个更容易开发、维护和测试的客户端应用程序。</p><h2 id="MVC-的优点"><a href="#MVC-的优点" class="headerlink" title="MVC 的优点"></a>MVC 的优点</h2><ul><li>耦合性低</li></ul><p>视图层和业务层分离，允许更改视图层代码而不用重新编译模型和控制器代码（改写html, css, javascirpt 的代码，并不需要重启服务器）</p><ul><li>重用性高</li></ul><p>分层后更有利于组件的重用：控制层可独立成一个能用的组件，视图层也可做成通用的操作界面</p><ul><li>可维护性高</li></ul><p>分离视图层和业务逻辑层使得 Web 应用更易于维护和修改</p><h2 id="MVC-的缺点"><a href="#MVC-的缺点" class="headerlink" title="MVC 的缺点"></a>MVC 的缺点</h2><ul><li>视图与控制器连接过于紧密</li></ul><p>虽然视图与控制器是相互分离，但是它们又联系紧密，视图没有控制器的存在，其应用是很有限的，反之亦然，所以会影响它们的独立重用</p><ul><li>不适合小型，中等规模的应用程序</li></ul><p>花费大量时间将MVC应用到规模并不是很大的应用程序通常会得不偿失（例如仅仅需要到数据库查信息，如果不分层设计我们可以直接从视图型层到模型去访问，效率上会有所提高，如果以代码的复杂性为代价，多了一层，代码量大大增加，在这个时候就降低了开发效率）</p><ul><li>视图对模型数据的低效率访问</li></ul><p>依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。对未变化数据的不必要的频繁访问，也将损害操作性能。</p><ul><li>一般高级的界面工具或构造器不支持模式</li></ul><p>改造这些工具以适应MVC需要和建立分离的部件的代价很高，造成 MVC 使用的困难。</p><h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><h2 id="什么是-MVVM"><a href="#什么是-MVVM" class="headerlink" title="什么是 MVVM"></a>什么是 MVVM</h2><p>MVVM 是 Model View ViewModel 的缩写</p><ul><li><p>Modal：模型层，指的是后端传递的数据</p></li><li><p>View：视图层，指的是所看到的页面</p></li><li><p>ViewModal：视图模型层，MVVM 模式的核心，它是连接view和model的桥梁，主要用来处理业务逻辑</p></li></ul><h2 id="它们三个有什么关系"><a href="#它们三个有什么关系" class="headerlink" title="它们三个有什么关系"></a>它们三个有什么关系</h2><p>直接看图</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy90dFZXdXJMb0dWaWFkeUV6WllDRWlhbXIxSWhKaWNlMUpGUW9CN2M3QjlDZ0NQSDIzYVV4QjBnNzI5WkNVMERWbnBJZEh3Mzl0aWJWNlJJdWpwdEFET1VIaWJnLzY0MA?x-oss-process=image/format,png#pic_center" alt="三者关系图"></p><p>大致过程：</p><ul><li><p>将模型转化成视图，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定。</p></li><li><p>将视图转化成模型，即将所看到的页面转化成后端的数据。实现的方式是：DOM 事件监听。</p></li><li><p>两个方向都实现的，就是数据的双向绑定。</p></li></ul><h2 id="MVVM-的特点"><a href="#MVVM-的特点" class="headerlink" title="MVVM 的特点"></a>MVVM 的特点</h2><p>在MVVM的框架下，视图和模型是不能直接通信的，它们通过 ViewModal 来通信，ViewModel 通常要实现一个observer 观察者。当数据发生变化，ViewModel 能够监听到数据的这种变化，然后通知到对应的视图做自动更新；而当用户操作视图，ViewModel 也能监听到视图的变化，然后通知数据做改动，这实际上就实现了数据的双向绑定。并且MVVM中的View 和 ViewModel可以互相通信。</p><h2 id="MVVM-的优点"><a href="#MVVM-的优点" class="headerlink" title="MVVM 的优点"></a>MVVM 的优点</h2><ul><li>低耦合</li></ul><p>视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的 View 上，当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。</p><ul><li>可重用性</li></ul><p>可以把一些视图逻辑放在一个 ViewModel 里面，让很多 view 重用这段视图逻辑。</p><ul><li>可测试性</li></ul><p>界面向来是比较难于测试的，而现在测试可以针对 ViewModel 来写</p><ul><li>双向数据绑定</li></ul><p>它实现了 View 和 Model 的自动同步，当 Model 的属性改变时，不需要手动操作 Dom 元素，来改变 View 的显示，而是改变属性后该属性对应 View 层显示会自动改变</p><h2 id="MVVM-的缺点"><a href="#MVVM-的缺点" class="headerlink" title="MVVM 的缺点"></a>MVVM 的缺点</h2><ul><li>数据绑定难以调试</li></ul><p>你看到界面异常了，有可能是你 View 的代码有 Bug，也可能是 Model 的代码有问题。数据绑定使得一个位置的 Bug 被快速传递到别的位置，要定位原始出问题的地方就变得不那么容易</p><ul><li>占用内存</li></ul><p>一个大的模块中 model 也会很大，虽然使用方便了也很容易保证了数据的一致性，当时长期持有，不释放内存就造成了花费更多的内存 </p><ul><li>数据双向绑定不利于代码重用</li></ul><p>客户端开发最常用的重用是 View，但是数据双向绑定技术，让你在一个 View 都绑定了一个 model，不同模块的 model 都不同。那就不能简单重用 View 了</p><h1 id="MVC-和-MVVM-的区别"><a href="#MVC-和-MVVM-的区别" class="headerlink" title="MVC 和 MVVM 的区别"></a>MVC 和 MVVM 的区别</h1><ul><li><p>MVVM 实现了 View 和 Model 的自动同步，也就是当 Model 的属性改变时，我们不用再自己手动操作 Dom 元素来改变 View 的显示，而是改变属性后该属性对应 View 层显示会自动改变。</p></li><li><p>MVC 是系统架构级别的（描述了构成系统的抽象组件，以及各个组件之间的是如何进行通讯），而 MVVM 只用于单页面上的。因此 MVVM 的灵活性要远大于 MVC</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
